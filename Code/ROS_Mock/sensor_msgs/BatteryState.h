// Generated by gencpp from file sensor_msgs/BatteryState.msg
// DO NOT EDIT!


#ifndef SENSOR_MSGS_MESSAGE_BATTERYSTATE_H
#define SENSOR_MSGS_MESSAGE_BATTERYSTATE_H


#include <string>
#include <vector>
#include <map>

#include "../std_msgs/Msg.h"

namespace sensor_msgs
{
    class BatteryState : public Msg
    {
    public:

        BatteryState()
            : Msg(), voltage(0.0), temperature(0.0), current(0.0), charge(0.0), capacity(0.0), design_capacity(0.0)
            , percentage(0.0), power_supply_status(0), power_supply_health(0), power_supply_technology(0), present(false)
            , cell_voltage(), cell_temperature(), location(), serial_number() {};
        BatteryState(const BatteryState& _alloc)
            : Msg(), voltage(0.0), temperature(0.0), current(0.0), charge(0.0), capacity(0.0), design_capacity(0.0)
            , percentage(0.0), power_supply_status(0), power_supply_health(0), power_supply_technology(0), present(false)
            , cell_voltage(), cell_temperature(), location(), serial_number() {};

        float voltage;
        float temperature;
        float current;
        float charge;
        float capacity;
        float design_capacity;
        float percentage;
        int power_supply_status;
        int power_supply_health;
        int power_supply_technology;
        int present;
        std::vector<float> cell_voltage;
        std::vector<float> cell_temperature;
        std::string location;
        std::string serial_number;

        typedef sensor_msgs::BatteryState* Ptr;
        typedef sensor_msgs::BatteryState* ConstPtr;
        typedef sensor_msgs::BatteryState* BatteryStatePtr;
        typedef sensor_msgs::BatteryState* BatteryStateConstPtr;


        std::ostream& operator<<(std::ostream& s)
        {
            return s;
        };
        bool operator==(const ::sensor_msgs::BatteryState& rhs)
        {
            return this->voltage == rhs.voltage &&
                this->temperature == rhs.temperature &&
                this->current == rhs.current &&
                this->charge == rhs.charge &&
                this->capacity == rhs.capacity &&
                this->design_capacity == rhs.design_capacity &&
                this->percentage == rhs.percentage &&
                this->power_supply_status == rhs.power_supply_status &&
                this->power_supply_health == rhs.power_supply_health &&
                this->power_supply_technology == rhs.power_supply_technology &&
                this->present == rhs.present &&
                this->cell_voltage == rhs.cell_voltage &&
                this->cell_temperature == rhs.cell_temperature &&
                this->location == rhs.location &&
                this->serial_number == rhs.serial_number;
        };
        bool operator!=(const ::sensor_msgs::BatteryState& rhs)
        {
            return !(*this == rhs);
        };
    }; // BatteryState
} // namespace sensor_msgs


#endif // SENSOR_MSGS_MESSAGE_BATTERYSTATE_H
